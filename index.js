const express = require('express');
const app = express();
const port = 3001;
const bodyParser = require("body-parser");
const swaggerJsdoc = require("swagger-jsdoc");
const swaggerUI = require("swagger-ui-express");
const cors = require("cors");
const {check, validationResult} = require('express-validator');
const axios = require('axios');
const router = express.Router();
var operationId = '';
app.use(express.json());


const request = require('request')
const options = {
  swaggerDefinition: {
    info: {
      title: 'Final Project 6177 API',
      version: '1.0.0',
      description: 'Final Project 6177  Express API with autogenerated swagger doc',
    },
	host:'157.245.253.65:3001',
	basePath: '/',
  },
  apis: ['./index.js'],
};


const specs = swaggerJsdoc(options);
app.use('/docs', swaggerUI.serve, swaggerUI.setup(specs));
app.use(cors());

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({extended:false}));

const https = require('https')
// const imageUrl = 'https://i.stack.imgur.com/jYikH.jpg'



const analyzeImageRoute = require('./routes/analyzeImageRoute');
const ocrRoute = require('./routes/ocrRoute');


app.get('/', (req, res) => {
    res.send('Hello World! This is a test that the API of Jessica Russ for 6177 Final Project is running!')
  })
  
  app.listen(port, () => {
    console.log(`Example app listening at http://localhost:${port}`)
  })

  module.exports = router;
  //POST - analyze image
/**
 * @swagger
 * definitions:
 *   Image:
 *     properties:
 *        url:
 *         type: string
 *     
 */
/**
 * @swagger
 * /postanalyzeimage:
 *    post:
 *      description: analyzes the image url
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: shows analyzed details 
 *          400:
 *              description: invliad request or argument
 *          415:
 *              description: unsupported media type error
 *          500: 
 *              description: internal server error
 *          503: 
 *              description: service unavailable
 *      parameters:
 *          - name: Image
 *            description: the Image url
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Image'
 *           
 *
 */
//attempt after feedback
app.use('/postanalyzeimage', analyzeImageRoute);



//POST OCR

/**
 * @swagger
 * /postocr:
 *    post:
 *      description: gets text from the image url
 *      produces:
 *          - application/json
 *      responses:
 *          200:
 *              description: shows analyzed details 
 *          400:
 *              description: invliad request or argument
 *          415:
 *              description: unsupported media type error
 *          500: 
 *              description: internal server error
 *          503: 
 *              description: service unavailable
  *      parameters:
 *          - name: Image
 *            description: the Image url
 *            in: body
 *            required: true
 *            schema:
 *              $ref: '#/definitions/Image'
 *           
 *
 */
//attempt after feedback
app.use('/postocr', ocrRoute);








 
